name: Docker Build and Push with Semantic Versioning

on:
  push:
    branches:
      - main
      - develop
    tags:
      - 'v*'
  pull_request:
    branches:
      - main

env:
  REGISTRY: docker.io
  IMAGE_NAME: jyothiram266/doc-semver

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          # set latest tag for default branch
          type=ref,event=branch
          type=ref,event=pr
          # semantic versioning tags
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=semver,pattern={{major}}
          # short commit sha
          type=sha,prefix={{branch}}-
          # latest tag
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Generate semantic version
      id: semver
      run: |
        # Install semver tool if needed
        if ! command -v semver &> /dev/null; then
          npm install -g semver
        fi
        
        # Get the latest tag
        LATEST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "v0.0.0")
        echo "Latest tag: $LATEST_TAG"
        
        # Remove 'v' prefix if present
        LATEST_VERSION=${LATEST_TAG#v}
        
        # Get all commits since last tag
        if [ "$LATEST_TAG" = "v0.0.0" ]; then
          # If no previous tags, get all commits
          COMMITS_SINCE_TAG=$(git log --format=%B --reverse)
        else
          # Get commits since last tag
          COMMITS_SINCE_TAG=$(git log ${LATEST_TAG}..HEAD --format=%B --reverse)
        fi
        
        echo "Analyzing commits since $LATEST_TAG:"
        echo "$COMMITS_SINCE_TAG"
        
        # Initialize flags for different types of changes
        HAS_BREAKING=false
        HAS_FEATURE=false
        HAS_FIX=false
        
        # Analyze all commits since last tag
        while IFS= read -r commit_msg; do
          if [[ -n "$commit_msg" ]]; then
            echo "Checking: $commit_msg"
            
            # Check for breaking changes (highest priority)
            if echo "$commit_msg" | grep -q "BREAKING CHANGE\|major:\|!:"; then
              HAS_BREAKING=true
              echo "  -> Found breaking change"
            # Check for features
            elif echo "$commit_msg" | grep -q "feat:\|feature:\|minor:"; then
              HAS_FEATURE=true
              echo "  -> Found feature"
            # Check for fixes
            elif echo "$commit_msg" | grep -q "fix:\|patch:\|bugfix:"; then
              HAS_FIX=true
              echo "  -> Found fix"
            fi
          fi
        done <<< "$COMMITS_SINCE_TAG"
        
        # Determine version bump based on priority: breaking > feature > fix
        if [ "$HAS_BREAKING" = true ]; then
          NEW_VERSION=$(semver -i major $LATEST_VERSION)
          BUMP_TYPE="major"
          REASON="Breaking changes detected"
        elif [ "$HAS_FEATURE" = true ]; then
          NEW_VERSION=$(semver -i minor $LATEST_VERSION)
          BUMP_TYPE="minor"
          REASON="New features detected"
        elif [ "$HAS_FIX" = true ]; then
          NEW_VERSION=$(semver -i patch $LATEST_VERSION)
          BUMP_TYPE="patch"
          REASON="Bug fixes detected"
        else
          # Default to patch if no specific patterns found
          NEW_VERSION=$(semver -i patch $LATEST_VERSION)
          BUMP_TYPE="patch"
          REASON="General changes (default patch bump)"
        fi
        
        echo "version=v$NEW_VERSION" >> $GITHUB_OUTPUT
        echo "bump_type=$BUMP_TYPE" >> $GITHUB_OUTPUT
        echo "reason=$REASON" >> $GITHUB_OUTPUT
        echo ""
        echo "🚀 Version Decision: v$LATEST_VERSION -> v$NEW_VERSION (${BUMP_TYPE} bump)"
        echo "📝 Reason: $REASON"

    - name: Build and push Docker image
      uses: docker/build-push-action@v6
      with:
        context: .
        platforms: linux/amd64,linux/arm64
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        build-args: |
          VERSION=${{ steps.semver.outputs.version }}
          BUILD_DATE=${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.created'] }}
          COMMIT_SHA=${{ github.sha }}

    - name: Generate changelog
      id: changelog
      run: |
        # Get the latest tag
        LATEST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "v0.0.0")
        
        # Generate changelog from commits since last tag
        if [ "$LATEST_TAG" = "v0.0.0" ]; then
          CHANGELOG=$(git log --pretty=format:"- %s (%h)" --reverse)
        else
          CHANGELOG=$(git log ${LATEST_TAG}..HEAD --pretty=format:"- %s (%h)" --reverse)
        fi
        
        # Handle multiline output for GitHub Actions
        echo "changelog<<EOF" >> $GITHUB_OUTPUT
        echo "$CHANGELOG" >> $GITHUB_OUTPUT
        echo "EOF" >> $GITHUB_OUTPUT

    - name: Create GitHub Release
      if: github.ref == 'refs/heads/main' && github.event_name == 'push'
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ steps.semver.outputs.version }}
        release_name: Release ${{ steps.semver.outputs.version }}
        body: |
          ## Changes
          
          This release includes a ${{ steps.semver.outputs.bump_type }} version bump.
          **Reason:** ${{ steps.semver.outputs.reason }}
          
          ### Commits included in this release:
          
          ${{ steps.changelog.outputs.changelog }}
          
          **Docker Images:**
          - `${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.semver.outputs.version }}`
          - `${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest`
          
          **Full Changelog:** https://github.com/${{ github.repository }}/compare/${{ steps.semver.outputs.version }}...HEAD
        draft: false
        prerelease: false

  security-scan:
    runs-on: ubuntu-latest
    needs: build-and-push
    if: github.event_name != 'pull_request'
    
    steps:
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@v2
      with:
        sarif_file: 'trivy-results.sarif'