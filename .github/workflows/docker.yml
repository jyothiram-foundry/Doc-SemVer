name: Semantic Docker Build and Push

on:
  push:
    branches: [ main, master ]

env:
  IMAGE_NAME: jyothiram266/doc-semver

jobs:
  semantic-version-and-build:
    runs-on: ubuntu-latest
    
    permissions:
      contents: write
      packages: write

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Get latest tag
        id: get_tag
        run: |
          # Get the latest tag, default to 0.0.0 if no tags exist
          LATEST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "0.0.0")
          echo "latest_tag=$LATEST_TAG" >> $GITHUB_OUTPUT
          echo "Latest tag: $LATEST_TAG"

      - name: Analyze commits for version bump
        id: version_bump
        run: |
          LATEST_TAG="${{ steps.get_tag.outputs.latest_tag }}"
          
          # Get commits since last tag
          if [ "$LATEST_TAG" = "0.0.0" ]; then
            COMMITS=$(git log --pretty=format:"%s" HEAD)
          else
            COMMITS=$(git log --pretty=format:"%s" ${LATEST_TAG}..HEAD)
          fi
          
          echo "Commits to analyze:"
          echo "$COMMITS"
          
          # Initialize flags for different types of changes
          HAS_BREAKING=false
          HAS_FEATURE=false
          HAS_FIX=false
          
          # Check for breaking changes (major) - highest priority
          if echo "$COMMITS" | grep -qE "(BREAKING CHANGE|!:|^[a-zA-Z]+!:)"; then
            HAS_BREAKING=true
          fi
          
          # Also check for keyword-based breaking changes
          if echo "$COMMITS" | grep -qiE "(break|breaking|major)"; then
            HAS_BREAKING=true
          fi
          
          # Check for features (minor)
          if echo "$COMMITS" | grep -qE "^feat(\([^)]*\))?:"; then
            HAS_FEATURE=true
          fi
          
          # Also check for keyword-based features
          if echo "$COMMITS" | grep -qiE "(feat|feature|add|new)"; then
            HAS_FEATURE=true
          fi
          
          # Check for fixes (patch)
          if echo "$COMMITS" | grep -qE "^fix(\([^)]*\))?:"; then
            HAS_FIX=true
          fi
          
          # Determine bump type based on priority (major > minor > patch)
          if [ "$HAS_BREAKING" = true ]; then
            BUMP_TYPE="major"
            echo "🚨 Breaking changes detected - MAJOR version bump"
          elif [ "$HAS_FEATURE" = true ]; then
            BUMP_TYPE="minor"
            echo "✨ New features detected - MINOR version bump"
          elif [ "$HAS_FIX" = true ]; then
            BUMP_TYPE="patch"
            echo "🐛 Bug fixes detected - PATCH version bump"
          else
            # Default to patch if no conventional commits found
            BUMP_TYPE="patch"
            echo "📦 No specific change type detected - defaulting to PATCH version bump"
          fi
          
          echo "bump_type=$BUMP_TYPE" >> $GITHUB_OUTPUT
          echo "Final bump type: $BUMP_TYPE"

      - name: Calculate new version
        id: new_version
        run: |
          LATEST_TAG="${{ steps.get_tag.outputs.latest_tag }}"
          BUMP_TYPE="${{ steps.version_bump.outputs.bump_type }}"
          
          # Remove 'v' prefix if present
          VERSION=${LATEST_TAG#v}
          
          # Split version into parts
          IFS='.' read -r MAJOR MINOR PATCH <<< "$VERSION"
          
          # Ensure we have valid numbers
          MAJOR=${MAJOR:-0}
          MINOR=${MINOR:-0}
          PATCH=${PATCH:-0}
          
          # Calculate new version based on bump type
          case $BUMP_TYPE in
            "major")
              NEW_MAJOR=$((MAJOR + 1))
              NEW_MINOR=0
              NEW_PATCH=0
              ;;
            "minor")
              NEW_MAJOR=$MAJOR
              NEW_MINOR=$((MINOR + 1))
              NEW_PATCH=0
              ;;
            "patch")
              NEW_MAJOR=$MAJOR
              NEW_MINOR=$MINOR
              NEW_PATCH=$((PATCH + 1))
              ;;
          esac
          
          NEW_VERSION="$NEW_MAJOR.$NEW_MINOR.$NEW_PATCH"
          
          echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT
          echo "Previous version: $LATEST_TAG"
          echo "New version: $NEW_VERSION"
          echo "Bump type: $BUMP_TYPE"

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: |
            ${{ env.IMAGE_NAME }}:${{ steps.new_version.outputs.new_version }}
            ${{ env.IMAGE_NAME }}:latest
          labels: |
            org.opencontainers.image.version=${{ steps.new_version.outputs.new_version }}
            org.opencontainers.image.revision=${{ github.sha }}
            org.opencontainers.image.created=${{ github.event.head_commit.timestamp }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Create Git tag
        run: |
          NEW_VERSION="${{ steps.new_version.outputs.new_version }}"
          git config user.name github-actions
          git config user.email github-actions@github.com
          git tag "v$NEW_VERSION"
          git push origin "v$NEW_VERSION"

      - name: Generate changelog
        id: changelog
        run: |
          LATEST_TAG="${{ steps.get_tag.outputs.latest_tag }}"
          NEW_VERSION="${{ steps.new_version.outputs.new_version }}"
          BUMP_TYPE="${{ steps.version_bump.outputs.bump_type }}"
          
          # Get commits since last tag for changelog
          if [ "$LATEST_TAG" = "0.0.0" ]; then
            COMMITS=$(git log --pretty=format:"- %s (%h)" HEAD)
          else
            COMMITS=$(git log --pretty=format:"- %s (%h)" ${LATEST_TAG}..HEAD)
          fi
          
          # Determine reason based on bump type
          case $BUMP_TYPE in
            "patch") REASON="Bug fixes detected" ;;
            "minor") REASON="New features added" ;;
            "major") REASON="Breaking changes introduced" ;;
          esac
          
          # Create changelog file
          cat > changelog.txt << EOF
          ## Changes
          
          This release includes a $BUMP_TYPE version bump.
          **Reason:** $REASON
          
          ### Commits included in this release:
          
          $COMMITS
          
          **Docker Images:**
          - \`${{ env.IMAGE_NAME }}:$NEW_VERSION\`
          - \`${{ env.IMAGE_NAME }}:latest\`
          EOF
          
          echo "changelog_file=changelog.txt" >> $GITHUB_OUTPUT

      - name: Create Release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ steps.new_version.outputs.new_version }}
          release_name: Release v${{ steps.new_version.outputs.new_version }}
          body_path: changelog.txt
          draft: false
          prerelease: false