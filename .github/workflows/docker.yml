name: Semantic Docker Build and Push with Detailed Release Notes

on:
  push:
    branches: [ main, master ]

env:
  IMAGE_NAME: jyothiram266/doc-semver

jobs:
  semantic-version-and-build:
    runs-on: ubuntu-latest
    
    permissions:
      contents: write
      packages: write

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Get latest tag
        id: get_tag
        run: |
          # Get the latest tag, default to 0.0.0 if no tags exist
          LATEST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "0.0.0")
          echo "latest_tag=$LATEST_TAG" >> $GITHUB_OUTPUT
          echo "Latest tag: $LATEST_TAG"

      - name: Analyze commits for version bump
        id: version_bump
        run: |
          LATEST_TAG="${{ steps.get_tag.outputs.latest_tag }}"
          
          # Get commits since last tag
          if [ "$LATEST_TAG" = "0.0.0" ]; then
            COMMITS=$(git log --pretty=format:"%s" HEAD)
          else
            COMMITS=$(git log --pretty=format:"%s" ${LATEST_TAG}..HEAD)
          fi
          
          echo "Commits to analyze:"
          echo "$COMMITS"
          
          # Initialize flags for different types of changes
          HAS_BREAKING=false
          HAS_FEATURE=false
          HAS_FIX=false
          
          # Check for breaking changes (major) - highest priority
          if echo "$COMMITS" | grep -qE "(major:|!:|^[a-zA-Z]+!:)"; then
            HAS_BREAKING=true
          fi
          

          
          # Check for features (minor)
          if echo "$COMMITS" | grep -qE "^minor:(\([^)]*\))?:"; then
            HAS_FEATURE=true
          fi
          
          
          # Check for fixes (patch)
          if echo "$COMMITS" | grep -qE "^patch:(\([^)]*\))?:"; then
            HAS_FIX=true
          fi
          
          # Determine bump type based on priority (major > minor > patch)
          if [ "$HAS_BREAKING" = true ]; then
            BUMP_TYPE="major"
            echo "🚨 Breaking changes detected - MAJOR version bump"
          elif [ "$HAS_FEATURE" = true ]; then
            BUMP_TYPE="minor"
            echo "✨ New features detected - MINOR version bump"
          elif [ "$HAS_FIX" = true ]; then
            BUMP_TYPE="patch"
            echo "🐛 Bug fixes detected - PATCH version bump"
          else
            # Default to patch if no conventional commits found
            BUMP_TYPE="patch"
            echo "📦 No specific change type detected - defaulting to PATCH version bump"
          fi
          
          echo "bump_type=$BUMP_TYPE" >> $GITHUB_OUTPUT
          echo "Final bump type: $BUMP_TYPE"

      - name: Calculate new version
        id: new_version
        run: |
          LATEST_TAG="${{ steps.get_tag.outputs.latest_tag }}"
          BUMP_TYPE="${{ steps.version_bump.outputs.bump_type }}"
          
          # Remove 'v' prefix if present
          VERSION=${LATEST_TAG#v}
          
          # Split version into parts
          IFS='.' read -r MAJOR MINOR PATCH <<< "$VERSION"
          
          # Ensure we have valid numbers
          MAJOR=${MAJOR:-0}
          MINOR=${MINOR:-0}
          PATCH=${PATCH:-0}
          
          # Calculate new version based on bump type
          case $BUMP_TYPE in
            "major")
              NEW_MAJOR=$((MAJOR + 1))
              NEW_MINOR=0
              NEW_PATCH=0
              ;;
            "minor")
              NEW_MAJOR=$MAJOR
              NEW_MINOR=$((MINOR + 1))
              NEW_PATCH=0
              ;;
            "patch")
              NEW_MAJOR=$MAJOR
              NEW_MINOR=$MINOR
              NEW_PATCH=$((PATCH + 1))
              ;;
          esac
          
          NEW_VERSION="$NEW_MAJOR.$NEW_MINOR.$NEW_PATCH"
          
          echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT
          echo "Previous version: $LATEST_TAG"
          echo "New version: $NEW_VERSION"
          echo "Bump type: $BUMP_TYPE"

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: |
            ${{ env.IMAGE_NAME }}:${{ steps.new_version.outputs.new_version }}
            ${{ env.IMAGE_NAME }}:latest
          labels: |
            org.opencontainers.image.version=${{ steps.new_version.outputs.new_version }}
            org.opencontainers.image.revision=${{ github.sha }}
            org.opencontainers.image.created=${{ github.event.head_commit.timestamp }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Create Git tag
        run: |
          NEW_VERSION="${{ steps.new_version.outputs.new_version }}"
          git config user.name github-actions
          git config user.email github-actions@github.com
          git tag "v$NEW_VERSION"
          git push origin "v$NEW_VERSION"

      - name: Generate detailed release notes
        id: release_notes
        run: |
          LATEST_TAG="${{ steps.get_tag.outputs.latest_tag }}"
          NEW_VERSION="${{ steps.new_version.outputs.new_version }}"
          BUMP_TYPE="${{ steps.version_bump.outputs.bump_type }}"
          
          # Get commit data with more details
          if [ "$LATEST_TAG" = "0.0.0" ]; then
            RAW_COMMITS=$(git log --pretty=format:"%H|%s|%an|%ad|%b" --date=short HEAD)
          else
            RAW_COMMITS=$(git log --pretty=format:"%H|%s|%an|%ad|%b" --date=short ${LATEST_TAG}..HEAD)
          fi
          
          # Initialize arrays for different commit types
          BREAKING_CHANGES=""
          FEATURES=""
          FIXES=""
          DOCS=""
          CHORES=""
          OTHER=""
          
          # Process each commit
          while IFS='|' read -r hash subject author date body; do
            if [ -z "$hash" ]; then continue; fi
            
            # Create commit entry with author and date
            COMMIT_ENTRY="- **${subject}** by @${author} on ${date} ([${hash:0:7}](https://github.com/${{ github.repository }}/commit/${hash}))"
            
            # Add body if it exists and is not empty
            if [ ! -z "$body" ] && [ "$body" != " " ]; then
              COMMIT_ENTRY="${COMMIT_ENTRY}
                > ${body}"
            fi
            
            # Categorize commits
            if echo "$subject" | grep -qE "(BREAKING CHANGE|!:|^[a-zA-Z]+!:)" || echo "$subject $body" | grep -qiE "(break|breaking|major)"; then
              BREAKING_CHANGES="${BREAKING_CHANGES}${COMMIT_ENTRY}
          "
            elif echo "$subject" | grep -qE "^feat(\([^)]*\))?:" || echo "$subject" | grep -qiE "(feat|feature|add|new)"; then
              FEATURES="${FEATURES}${COMMIT_ENTRY}
          "
            elif echo "$subject" | grep -qE "^fix(\([^)]*\))?:" || echo "$subject" | grep -qiE "(fix|bug)"; then
              FIXES="${FIXES}${COMMIT_ENTRY}
          "
            elif echo "$subject" | grep -qE "^docs?(\([^)]*\))?:" || echo "$subject" | grep -qiE "(doc|documentation|readme)"; then
              DOCS="${DOCS}${COMMIT_ENTRY}
          "
            elif echo "$subject" | grep -qE "^(chore|ci|build|test)(\([^)]*\))?:" || echo "$subject" | grep -qiE "(chore|maintenance|deps|dependencies)"; then
              CHORES="${CHORES}${COMMIT_ENTRY}
          "
            else
              OTHER="${OTHER}${COMMIT_ENTRY}
          "
            fi
          done <<< "$RAW_COMMITS"
          
          # Get release statistics
          TOTAL_COMMITS=$(echo "$RAW_COMMITS" | grep -v '^$' | wc -l)
          CONTRIBUTORS=$(git log --pretty=format:"%an" ${LATEST_TAG}..HEAD 2>/dev/null | sort | uniq | wc -l)
          if [ "$LATEST_TAG" = "0.0.0" ]; then
            CONTRIBUTORS=$(git log --pretty=format:"%an" HEAD | sort | uniq | wc -l)
          fi
          
          # Get files changed
          if [ "$LATEST_TAG" = "0.0.0" ]; then
            FILES_CHANGED=$(git diff --name-only HEAD~${TOTAL_COMMITS} HEAD 2>/dev/null | wc -l || echo "0")
          else
            FILES_CHANGED=$(git diff --name-only ${LATEST_TAG}..HEAD 2>/dev/null | wc -l || echo "0")
          fi
          
          # Determine version impact and description
          case $BUMP_TYPE in
            "major")
              VERSION_IMPACT="🚨 **MAJOR RELEASE**"
              VERSION_DESC="This release contains **breaking changes** that may require updates to your implementation."
              ;;
            "minor")
              VERSION_IMPACT="✨ **MINOR RELEASE**"
              VERSION_DESC="This release introduces new features while maintaining backward compatibility."
              ;;
            "patch")
              VERSION_IMPACT="🐛 **PATCH RELEASE**"
              VERSION_DESC="This release contains bug fixes and improvements."
              ;;
          esac
          
          # Generate Docker pull commands
          DOCKER_COMMANDS="
          \`\`\`bash
          # Pull the latest version
          docker pull ${{ env.IMAGE_NAME }}:${NEW_VERSION}
          
          # Or pull the latest tag
          docker pull ${{ env.IMAGE_NAME }}:latest
          \`\`\`"
          
          # Create comprehensive release notes
          cat > release_notes.md << EOF
          ${VERSION_IMPACT}
          
          ${VERSION_DESC}
          
          ## 📊 Release Summary
          
          | Metric | Value |
          |--------|-------|
          | **Version** | \`v${NEW_VERSION}\` |
          | **Previous Version** | \`${LATEST_TAG}\` |
          | **Release Type** | ${BUMP_TYPE^} |
          | **Total Commits** | ${TOTAL_COMMITS} |
          | **Contributors** | ${CONTRIBUTORS} |
          | **Files Changed** | ${FILES_CHANGED} |
          | **Release Date** | $(date '+%B %d, %Y') |
          
          ## 🐳 Docker Images
          
          This release is available as Docker images:
          
          - \`${{ env.IMAGE_NAME }}:${NEW_VERSION}\` - Specific version
          - \`${{ env.IMAGE_NAME }}:latest\` - Latest release
          
          ### Quick Start
          ${DOCKER_COMMANDS}
          
          ## 📝 What's Changed
          
          EOF
          
          # Add sections based on what changes exist
          if [ ! -z "$BREAKING_CHANGES" ]; then
            cat >> release_notes.md << EOF
          ### 🚨 Breaking Changes
          
          ${BREAKING_CHANGES}
          EOF
          fi
          
          if [ ! -z "$FEATURES" ]; then
            cat >> release_notes.md << EOF
          ### ✨ New Features
          
          ${FEATURES}
          EOF
          fi
          
          if [ ! -z "$FIXES" ]; then
            cat >> release_notes.md << EOF
          ### 🐛 Bug Fixes
          
          ${FIXES}
          EOF
          fi
          
          if [ ! -z "$DOCS" ]; then
            cat >> release_notes.md << EOF
          ### 📚 Documentation
          
          ${DOCS}
          EOF
          fi
          
          if [ ! -z "$CHORES" ]; then
            cat >> release_notes.md << EOF
          ### 🔧 Maintenance & Dependencies
          
          ${CHORES}
          EOF
          fi
          
          if [ ! -z "$OTHER" ]; then
            cat >> release_notes.md << EOF
          ### 📦 Other Changes
          
          ${OTHER}
          EOF
          fi
          
          # Add footer with additional information
          cat >> release_notes.md << EOF
          
          ## 🔗 Links
          
          - **Docker Hub**: [${IMAGE_NAME}](https://hub.docker.com/r/${IMAGE_NAME})
          - **Source Code**: [v${NEW_VERSION}](https://github.com/${{ github.repository }}/tree/v${NEW_VERSION})
          - **Compare Changes**: [${LATEST_TAG}...v${NEW_VERSION}](https://github.com/${{ github.repository }}/compare/${LATEST_TAG}...v${NEW_VERSION})
          
          ## 💬 Feedback
          
          If you encounter any issues with this release, please [open an issue](https://github.com/${{ github.repository }}/issues/new) on GitHub.
          
          ---
          
          **Full Changelog**: https://github.com/${{ github.repository }}/compare/${LATEST_TAG}...v${NEW_VERSION}
          EOF
          
          echo "release_notes_file=release_notes.md" >> $GITHUB_OUTPUT
          
          # Preview the release notes in the action log
          echo "=== GENERATED RELEASE NOTES ==="
          cat release_notes.md
          echo "==============================="

      - name: Create Release with Detailed Notes
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ steps.new_version.outputs.new_version }}
          release_name: "🚀 Release v${{ steps.new_version.outputs.new_version }}"
          body_path: release_notes.md
          draft: false
          prerelease: false

      - name: Upload release notes as artifact
        uses: actions/upload-artifact@v4
        with:
          name: release-notes-v${{ steps.new_version.outputs.new_version }}
          path: release_notes.md
          retention-days: 90
